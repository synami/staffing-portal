version: '3'

networks:
  staff-portal:
    driver: bridge

services:
  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    restart: on-failure
    networks:
      - staff-portal

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - staff-portal

  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - "8100:80"
    depends_on:
      - backend
    restart: on-failure
    networks:
      - staff-portal

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      CHOKIDAR_USEPOLLING: "true"
      NODE_ENV: "development"
    volumes:
      - ./backend/src:/usr/src/app/src
    command: npm run start:dev
    restart: on-failure
    networks:
      - staff-portal

#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    environment:
#      CHOKIDAR_USEPOLLING: "true"
#      DANGEROUSLY_DISABLE_HOST_CHECK: "true"
#    container_name: frontend
#    volumes:
#      - ./frontend/src:/app/src
#      - ./frontend/public:/app/public
#    links:
#      - backend
#    command: npm run start #ToDo change to real used command
#    restart: on-failure
#    networks:
#      - staff-portal

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_DATABASE: "staffing"
    ports:
      - 27017:27017
    command: mongod
    volumes:
      - ./mongodb:/data/db # ToDo change to persistent volume (up to you)
    restart: on-failure
    networks:
      - staff-portal